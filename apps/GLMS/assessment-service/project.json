{
  "name": "assessment-service",
  "$schema": "../../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "apps/GLMS/assessment-service",
  "projectType": "application",
  "targets": {
    "build": {
      "executor": "@nx/next:build",
      "outputs": ["{options.outputPath}"],
      "defaultConfiguration": "production",
      "options": {
        "outputPath": "dist/apps/GLMS/assessment-service"
      },
      "configurations": {
        "development": {
          "outputPath": "apps/GLMS/assessment-service"
        },
        "production": {}
      },
      "dependsOn": [{ "target": "graphql-codegen" }]
    },
    "serve": {
      "executor": "@nx/next:server",
      "defaultConfiguration": "development",
      "options": {
        "buildTarget": "assessment-service:build",
        "dev": true
      },
      "configurations": {
        "development": {
          "buildTarget": "assessment-service:build:development",
          "port": 4000,
          "dev": true
        },
        "production": {
          "buildTarget": "assessment-service:build:production",
          "dev": false
        }
      },
      "dependsOn": [{ "target": "graphql-codegen" }]
    },
    "graphql-codegen": {
      "executor": "nx:run-commands",
      "options": {
        "commands": ["graphql-codegen --config apps/GLMS/assessment-service/codegen.ts"]
      }
    },
    "export": {
      "executor": "@nx/next:export",
      "options": {
        "buildTarget": "assessment-service:build:production"
      }
    },
    "test": {
      "executor": "@nx/jest:jest",
      "outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
      "options": {
        "jestConfig": "apps/GLMS/assessment-service/jest.config.ts",
        "codeCoverage": true,
        "passWithNoTests": true
      },
      "configurations": {
        "ci": {
          "ci": true
        }
      }
    },
    "lint": {
      "executor": "@nx/eslint:lint",
      "outputs": ["{options.outputFile}"],
      "options": {
        "lintFilePatterns": ["apps/GLMS/assessment-service/**/*.{ts,tsx,js,jsx}"]
      }
    },
    "get-secrets:development": {
      "executor": "@pinecone-intern-monorepo/secrets:get",
      "defaultConfiguration": "development",
      "configurations": {
        "development": {
          "groups": ["assessment-service"],
          "env": "dev"
        }
      }
    },
    "get-secrets:testing": {
      "executor": "@pinecone-intern-monorepo/secrets:get",
      "defaultConfiguration": "testing",
      "configurations": {
        "testing": {
          "groups": ["assessment-service"],
          "env": "test"
        }
      }
    },
    "get-secrets:production": {
      "executor": "@pinecone-intern-monorepo/secrets:get",
      "defaultConfiguration": "production",
      "configurations": {
        "production": {
          "groups": ["assessment-service"],
          "env": "prod"
        }
      }
    },
    "add-secrets": {
      "executor": "@pinecone-intern-monorepo/secrets:add"
    },
    "clean": {
      "executor": "nx:run-commands",
      "options": {
        "commands": ["rm -rf .vercel", "rm -rf dist/apps/GLMS/assessment-service"]
      }
    },
    "export-env": {
      "executor": "nx:run-commands",
      "options": {
        "commands": ["export $(cat apps/GLMS/assessment-service/.env | xargs)"],
        "parallel": false
      }
    },
    "deploy-dev": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "npx dotenv -v VERCEL_ORG_ID=team_0ASDilhqwPl5fll9OnzqDM30 -v VERCEL_PROJECT_ID=prj_A7XtNvB1EYyOBSi74ana5geZQHdp -- vercel pull --yes --environment=production --token=$VERCEL_TOKEN",
          "vercel build --prod --token=$VERCEL_TOKEN",
          "npx dotenv -v VERCEL_ORG_ID=team_0ASDilhqwPl5fll9OnzqDM30 -v VERCEL_PROJECT_ID=prj_A7XtNvB1EYyOBSi74ana5geZQHdp -- vercel --prebuilt --prod --token=$VERCEL_TOKEN"
        ],
        "parallel": false
      },
      "dependsOn": [
        {
          "target": "clean"
        },
        {
          "target": "get-secrets:development"
        },
        {
          "target": "export-env"
        }
      ]
    },
    "preview": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "npx dotenv -v VERCEL_ORG_ID=team_0ASDilhqwPl5fll9OnzqDM30 -v VERCEL_PROJECT_ID=prj_ZtOLZf6VWajTct64sF4bWVUtDTxZ -- vercel pull --yes --environment=preview --token=$VERCEL_TOKEN",
          "vercel build --token=$VERCEL_TOKEN",
          "npx dotenv -v VERCEL_ORG_ID=team_0ASDilhqwPl5fll9OnzqDM30 -v VERCEL_PROJECT_ID=prj_ZtOLZf6VWajTct64sF4bWVUtDTxZ -- vercel --prebuilt --token=$VERCEL_TOKEN"
        ],
        "parallel": false
      },
      "dependsOn": [
        {
          "target": "clean"
        },
        {
          "target": "get-secrets:testing"
        },
        {
          "target": "export-env"
        }
      ]
    },
    "deploy-testing": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "npx dotenv -v VERCEL_ORG_ID=team_0ASDilhqwPl5fll9OnzqDM30 -v VERCEL_PROJECT_ID=prj_ZtOLZf6VWajTct64sF4bWVUtDTxZ -- vercel pull --yes --environment=production --token=$VERCEL_TOKEN",
          "vercel build --prod --token=$VERCEL_TOKEN",
          "npx dotenv -v VERCEL_ORG_ID=team_0ASDilhqwPl5fll9OnzqDM30 -v VERCEL_PROJECT_ID=prj_ZtOLZf6VWajTct64sF4bWVUtDTxZ -- vercel --prebuilt --prod --token=$VERCEL_TOKEN"
        ],
        "parallel": false
      },
      "dependsOn": [
        {
          "target": "clean"
        },
        {
          "target": "get-secrets:testing"
        },
        {
          "target": "export-env"
        }
      ]
    },
    "deploy-prod": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "npx dotenv -v VERCEL_ORG_ID=team_0ASDilhqwPl5fll9OnzqDM30 -v VERCEL_PROJECT_ID=prj_yAMC677aNG2TUdqn2ISoZC6N7HIW -- vercel pull --yes --environment=production --token=$VERCEL_TOKEN",
          "vercel build --prod --token=$VERCEL_TOKEN",
          "npx dotenv -v VERCEL_ORG_ID=team_0ASDilhqwPl5fll9OnzqDM30 -v VERCEL_PROJECT_ID=prj_yAMC677aNG2TUdqn2ISoZC6N7HIW -- vercel --prebuilt --prod --token=$VERCEL_TOKEN"
        ],
        "parallel": false
      },
      "dependsOn": [
        {
          "target": "clean"
        },
        {
          "target": "get-secrets:production"
        },
        {
          "target": "export-env"
        }
      ]
    }
  },
  "tags": []
}
